
#####################################################################
#   Includes
#####################################################################
[include fluidd.cfg]
[include Printer/Macros.cfg]
[include Printer/TestMacros.cfg]
[include Printer/sensorless.cfg]
[include Printer/bedfans.cfg]
[include Printer/LCD/LCD.cfg]
[include Printer/LCD/menu.cfg]
[include Printer/Toolhead.cfg]
#[include Printer/NevermoreMax.cfg]
[include Printer/TEST_SPEED.cfg]
[include KAMP/*cfg]
[include Printer/Spoolman.cfg]

[exclude_object] 
#####################################################################
#   MCU
#####################################################################
[mcu]
##  Obtain definition by "ls -l /dev/serial/by-id/" then unplug to verify
##--------------------------------------------------------------------
serial: /dev/serial/by-id/usb-Klipper_stm32f446xx_34005C000B51373330333137-if00
restart_method: command
##--------------------------------------------------------------------


[mcu rpi]
serial: /tmp/klipper_host_mcu

#[mcu my_can_mcu]
#canbus_uuid: 6800dec8630a

[printer]
kinematics: corexy
max_velocity: 700  
max_accel: 5000
max_z_velocity: 20          #Max 15 for 12V TMC Drivers, can increase for 24V
max_z_accel: 350
square_corner_velocity: 5.0

#####################################################################
#   X/Y Stepper Settings
#####################################################################

##  B Stepper - Left
##  Connected to MOTOR0
##  Endstop connected to DIAG0
[stepper_x]
step_pin: PF13
dir_pin: PF12
enable_pin: !PF14
rotation_distance: 40
microsteps: 32
full_steps_per_rotation:400  #set to 200 for 1.8 degree stepper
endstop_pin: ^EBBCan:PB8
position_min: 0
position_endstop: 350
position_max: 350

##--------------------------------------------------------------------
homing_speed: 20   #Max 100
homing_retract_dist: 0
homing_positive_dir: true

[tmc2209 stepper_x]
uart_pin: PC4
interpolate: false
run_current: 0.8
sense_resistor: 0.110
stealthchop_threshold: 0
#diag_pin: ^PG6 # use the same pin that was previously the endstop_pin!
driver_SGTHRS: 105

##  A Stepper - Right
##  Connected to MOTOR1
##  Endstop connected to DIAG1
[stepper_y]
step_pin: PG0
dir_pin: PG1
enable_pin: !PF15
rotation_distance: 40
microsteps: 32
full_steps_per_rotation:400  #set to 200 for 1.8 degree stepper
endstop_pin: ^PG14
position_min: -1
position_endstop: 356
position_max: 356

##--------------------------------------------------------------------
homing_speed: 20  #Max 100
homing_retract_dist: 0
homing_positive_dir: true

[tmc2209 stepper_y]
uart_pin: PD11
interpolate: false
run_current: 0.8
sense_resistor: 0.110
stealthchop_threshold: 0
#diag_pin: ^PG9     # use the same pin that was previously the endstop_pin!
driver_SGTHRS: 105 # 255 is most sensitive value, 0 is least sensitive
 
#####################################################################
#   Z Stepper Settings
#####################################################################

## Z0 Stepper - Front Left
##  Connected to MOTOR2_1
##  Endstop connected to DIAG_2
[stepper_z]
step_pin: PF11
dir_pin: PG3
enable_pin: !PG5
rotation_distance: 40
gear_ratio: 80:16
microsteps: 32
endstop_pin: probe:z_virtual_endstop # use beacon as virtual endstop
homing_retract_dist: 0 # beacon needs this to be set to 0
position_max: 310

##--------------------------------------------------------------------
position_min: -9
homing_speed: 8
second_homing_speed: 3
homing_retract_dist: 3

[tmc2209 stepper_z]
uart_pin: PC6
interpolate: false
run_current: 0.8
sense_resistor: 0.110
stealthchop_threshold: 999999

##  Z1 Stepper - Rear Left
##  Connected to MOTOR3
[stepper_z1]
step_pin: PG4
dir_pin: !PC1
enable_pin: !PA0
rotation_distance: 40
gear_ratio: 80:16
microsteps: 32

[tmc2209 stepper_z1]
uart_pin: PC7
interpolate: false
run_current: 0.8
sense_resistor: 0.110
stealthchop_threshold: 999999

##  Z2 Stepper - Rear Right
##  Connected to MOTOR4
[stepper_z2]
step_pin: PF9
dir_pin: PF10
enable_pin: !PG2
rotation_distance: 40
gear_ratio: 80:16
microsteps: 32

[tmc2209 stepper_z2]
uart_pin: PF2
interpolate: false
run_current: 0.8
sense_resistor: 0.110
stealthchop_threshold: 999999

##  Z3 Stepper - Front Right
##  Connected to MOTOR5
[stepper_z3]
step_pin: PC13
dir_pin: !PF0
enable_pin: !PF1
rotation_distance: 40
gear_ratio: 80:16
microsteps: 32

[tmc2209 stepper_z3]
uart_pin: PE4
interpolate: false
run_current: 0.8
sense_resistor: 0.110
stealthchop_threshold: 999999

#####################################################################
#   Bed Heater
#####################################################################

[heater_bed]
##  SSR Pin - HE1
##  Thermistor - TB
heater_pin: PA1
##  Validate the following thermistor type to make sure it is correct
##  See https://www.klipper3d.org/Config_Reference.html#common-thermistors for additional options
sensor_type: Generic 3950
sensor_pin: PF3
max_power: 1.0
min_temp: 0
max_temp: 120

#####################################################################
#   Fan Control
#####################################################################

[controller_fan controller_fan]
##  Controller fan - CNC_FAN0
pin: PA8
kick_start_time: 0.5
heater: heater_bed
fan_speed: 0.5

[fan_generic filter_fan]
#  Exhaust fan - CNC_FAN3
pin: PD13
max_power: 1.0
shutdown_speed: 0.0
kick_start_time: 5.0

[fan_generic exhaust_fan]
# 4-pin computer PWM exhaust fan - FAN5
pin: rpi:pwmchip0/pwm0
max_power: 1.0
shutdown_speed: 0.0
kick_start_time: 2.0
# The official PC fan spec calls for 21-28kHz PWM frequency, but my Noctua at least was happy with the default 100Hz software PWM. So if your controller doesn't support hardware_pwm then try leaving these two lines out:
hardware_pwm: True
cycle_time: 0.00004 # 25 kHz
# RPM monitoring:
tachometer_pin: rpi:gpio23
tachometer_ppr: 2


#Defined inside Printer/bedfans.cfg
#[fan_generic bed_fan]
#  Exhaust fan - CNC_FAN4
#pin: PD14
#max_power: 1.0
#shutdown_speed: 0.0
#kick_start_time: 5.0

#####################################################################
#   LED Control
#####################################################################

[output_pin caselight]
## Chamber Lighting - CNC_FAN5
pin: PD15
pwm:true
shutdown_value: 0
value:0
cycle_time: 0.01

#####################################################################
#   Additional Sensors
#####################################################################

#  MCU temperatures
[temperature_sensor octopus]
sensor_type: temperature_mcu
sensor_mcu: mcu

[temperature_sensor RaspberryPi]
sensor_type: temperature_host
#sensor_path: "/sys/class/thermal/thermal_zone0/temp"

#####################################################################
# 	Homing and Gantry Adjustment Routines
#####################################################################

[beacon]
serial: /dev/serial/by-id/usb-Beacon_Beacon_RevD_0EC5E4CD515137474C202020FF0D1C42-if00
x_offset: -20 # update with offset from nozzle on your machine
y_offset: 0 # update with offset from nozzle on your machine
mesh_main_direction: x
mesh_runs: 2

[safe_z_home]
##  XY Location of the Z Endstop Switch
##  Update -10,-10 to the XY coordinates of your endstop pin 
##  (such as 157,305) after going through Z Endstop Pin
##  Location Definition step.
home_xy_position:175,175
z_hop:3

[idle_timeout]
timeout: 1800
#timeout: 1800000
[quad_gantry_level]
##  Use QUAD_GANTRY_LEVEL to level a gantry.
##  Min & Max gantry corners - measure from nozzle at MIN (0,0) and 
##  MAX (250, 250), (300,300), or (350,350) depending on your printer size
##  to respective belt positions
gantry_corners:
   -60,-10
   410,420
#  Probe points
points:
   50,25
   50,275
   300,275
   300,25
   
speed: 100
horizontal_move_z: 15
retries: 5
retry_tolerance: 0.0075
max_adjust: 10

########################################
# EXP1 / EXP2 (display) pins
########################################

[board_pins]
aliases:
    # EXP1 header
    EXP1_1=PE8, EXP1_2=PE7,
    EXP1_3=PE9, EXP1_4=PE10,
    EXP1_5=PE12, EXP1_6=PE13,    # Slot in the socket on this side
    EXP1_7=PE14, EXP1_8=PE15,
    EXP1_9=<GND>, EXP1_10=<5V>,

    # EXP2 header
    EXP2_1=PA6, EXP2_2=PA5,
    EXP2_3=PB1, EXP2_4=PA4,
    EXP2_5=PB2, EXP2_6=PA7,      # Slot in the socket on this side
    EXP2_7=PC15, EXP2_8=<RST>,
    EXP2_9=<GND>, EXP2_10=<5V>

#####################################################################
#   Displays
#####################################################################

[display]
#  mini12864 LCD Display
lcd_type: uc1701
cs_pin: EXP1_3
a0_pin: EXP1_4
rst_pin: EXP1_5
encoder_pins: ^EXP2_5, ^EXP2_3
click_pin: ^!EXP1_2
contrast: 63
spi_software_miso_pin: EXP2_1
spi_software_mosi_pin: EXP2_6
spi_software_sclk_pin: EXP2_2

[neopixel lcd]
#  To control Neopixel RGB in mini12864 display
pin: EXP1_6
chain_count: 3
initial_RED: 0.1
initial_GREEN: 0.5
initial_BLUE: 0.0
color_order: RGB

[output_pin beeper]
pin: EXP1_1
pwm: True
#static_value:
value: 0
shutdown_value: 0
cycle_time: 0.0005
#hardware_pwm: False
#scale: 

##  Set RGB values on boot up for each Neopixel. 
##  Index 1 = display, Index 2 and 3 = Knob
[delayed_gcode setdisplayneopixel]
initial_duration: 1
gcode:
        SET_LED LED=lcd RED=1 GREEN=1 BLUE=1 INDEX=1 TRANSMIT=0
        SET_LED LED=lcd RED=1 GREEN=0 BLUE=0 INDEX=2 TRANSMIT=0
        SET_LED LED=lcd RED=1 GREEN=0 BLUE=0 INDEX=3 


##FOLLOW THE FORUMULA FOR relative_reference_index, for example:
##[(7x7)-1] / 2 = 24
##[(5x5)-1] / 2 = 12

[bed_mesh]
mesh_min: 30,30
mesh_max: 320,320
horizontal_move_z: 12
speed: 450
probe_count: 5,5
relative_reference_index: 12
algorithm: bicubic
fade_start: 0.26
fade_end: 2
#fade_target: 0
#   The z position in which fade should converge. When this value is
#   set to a non-zero value it must be within the range of z-values in
#   the mesh. Users that wish to converge to the z homing position
#   should set this to 0. Default is the average z value of the mesh.
#move_check_distance: 3
#   The distance (in mm) along a move to check for split_delta_z.
#   This is also the minimum length that a move can be split. Default
#   is 5.0.
split_delta_z: 0.01
#   The amount of Z difference (in mm) along a move that will
#   trigger a split. Default is .025.
#mesh_pps: 4,4
#   A comma separated pair of integers (X,Y) defining the number of
#   points per segment to interpolate in the mesh along each axis. A
#   "segment" can be defined as the space between each probed
#   point. The user may enter a single value which will be applied
#   to both axes.  Default is 2,2.
#bicubic_tension: 0.2
#   When using the bicubic algorithm the tension parameter above
#   may be applied to change the amount of slope interpolated.
#   Larger numbers will increase the amount of slope, which
#   results in more curvature in the mesh. Default is .2.

#--------------------------------------------------------------------
#####################################################################

#*# <---------------------- SAVE_CONFIG ---------------------->
#*# DO NOT EDIT THIS BLOCK OR BELOW. The contents are auto-generated.
#*#
#*# [heater_bed]
#*# control = pid
#*# pid_kp = 39.685
#*# pid_ki = 1.107
#*# pid_kd = 355.675
#*#
#*# [extruder]
#*# control = pid
#*# pid_kp = 32.402
#*# pid_ki = 1.588
#*# pid_kd = 165.252
#*#
#*# [bed_mesh default]
#*# version = 1
#*# points =
#*# 	0.077500, 0.101250, 0.070000, 0.176250, 0.048750
#*# 	0.028750, 0.061250, 0.021250, -0.022500, 0.003750
#*# 	0.020000, 0.008750, 0.000000, -0.047500, -0.005000
#*# 	0.012500, 0.015000, -0.005000, -0.041250, 0.032500
#*# 	0.083750, 0.055000, 0.053750, 0.031250, 0.093750
#*# tension = 0.2
#*# min_x = 30.0
#*# algo = bicubic
#*# y_count = 5
#*# mesh_y_pps = 2
#*# min_y = 30.0
#*# x_count = 5
#*# max_y = 320.0
#*# mesh_x_pps = 2
#*# max_x = 320.0
#*#
#*# [input_shaper]
#*#
#*# [probe]
#*# z_offset = -0.800
